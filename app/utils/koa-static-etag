const send = require("koa-send")
module.exports = function (opts) {
    let options = Object.assign({}, {
        mode: 'etag',
        root: process.cwd(),
        pathMatch: '*',
        etagExt: "*",
        setHeaders: null,
        index: "index.html"
    }, opts)
    return async(ctx, next) => {
        let path = ctx.path
        if (options.mode && (
                options.etagExt == "*" ||
                options.etagExt instanceof Array && options.etagExt.indexOf('ext') > 0 ||
                options.etagExt instanceof RegExp && options.etagExt.test(path)
            )) {
            options.setHeaders = function (res, path, stats) {
                if (stats.isFile()) {
                    if (options.mode == 'etag') {
                        console.info("eee")
                        let etag = `${stats.mtime.getTime().toString(16)}-${stats.size.toString(16)}`
                        let match = ctx.request.header && ctx.request.header['if-none-match']
                        if (match == etag) {
                            ctx.status = 304
                            return
                        } else {
                            ctx.set('Etag', etag)
                        }
                    }
                    if (options.mode == "lastModified") {
                        let lastModified = stats.mtime.toUTCString()
                        let match = ctx.request.header && ctx.request.header['if-modified-since']
                        if (match == lastModified) {
                            ctx.status = 304
                            return
                        } else {
                            ctx.set('Last-Modified', lastModified)
                        }
                    }
                }
            }
        }


        if (options.pathMatch == "*" ||
            ( typeof options.pathMatch == "string" && options.pathMatch == path) ||
            (options.pathMatch instanceof RegExp && options.pathMatch.test(path)) ||
            (typeof options.pathMatch == "function" && options.pathMatch(path))) {
            await send(ctx, path, {
                root: options.root,
                setHeaders: options.setHeaders,
                index: options.index
            });
        }
        await next()
    }
}